import streamlit as st
import requests
import json
import pandas as pd
from questions_reduites_shuffled_copy import questions

# --- Configuration de l'API ---
FLASK_API_URL = "http://localhost:5000/generate_sql"
EXECUTE_SQL_URL = "http://localhost:5000/execute_sql"
START_SESSION_URL = "http://localhost:5000/start_session"
END_SESSION_URL = "http://localhost:5000/end_session"

# --- Initialisation Session State ---
if "session_id" not in st.session_state:
    st.session_state.session_id = None
if "history" not in st.session_state:
    st.session_state.history = []
if "last_sql_generated" not in st.session_state:
    st.session_state.last_sql_generated = None

# --- Configuration de la page ---
st.set_page_config(page_title="NLP to SQL", layout="centered", page_icon="üîç")
st.title("üîç NLP ‚Üí SQL Pipeline")
st.markdown("Interrogez votre base de donn√©es avec du langage naturel")
tab1, tab2, tab3 = st.tabs(["Question Libre", "Test Multi-Questions", "Batch Session Unique"])

# --- Sidebar: Gestion Session ---
with st.sidebar:
    st.header("üìã Gestion de Session")
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ Nouvelle Session", use_container_width=True):
            try:
                response = requests.post(START_SESSION_URL)
                if response.status_code == 200:
                    session_id = response.json()["session_id"]
                    st.session_state.session_id = session_id
                    st.session_state.history = []
                    st.success(f"Session d√©marr√©e !\nID: `{session_id}`")
                else:
                    st.error("Erreur cr√©ation session")
            except Exception as e:
                st.error(f"Connexion API impossible: {e}")
    
    with col2:
        if st.button("‚ùå Terminer Session", use_container_width=True, disabled=not st.session_state.session_id):
            try:
                if st.session_state.session_id:
                    payload = {"session_id": st.session_state.session_id}
                    requests.post(END_SESSION_URL, json=payload)
            except Exception:
                pass
            finally:
                st.session_state.session_id = None
                st.session_state.history = []
                st.success("Session termin√©e")
    
    st.divider()
    
    # --- Afficher l'√©tat de la session ---
    st.subheader("√âtat Actuel")
    if st.session_state.session_id:
        st.success(f"**Session active:**\n`{st.session_state.session_id}`")
        st.info(f"{len(st.session_state.history)} requ√™tes dans l'historique")
    else:
        st.warning("Aucune session active")
    
    st.divider()
    
    # --- V√©rification API ---
    st.subheader("üß™ V√©rification API")
    if st.button("Tester la connexion API", use_container_width=True):
        try:
            health_url = FLASK_API_URL.replace("/generate_sql", "/health")
            response = requests.get(health_url, timeout=5)
            if response.status_code == 200:
                st.success("‚úÖ API connect√©e et op√©rationnelle")
            else:
                st.error(f"‚ùå Statut API: {response.status_code}")
        except Exception as e:
            st.error(f"üîå Connexion impossible: {e}")

# --- Tab 1: Question Libre ---
with tab1:
    st.subheader("üß† Posez votre question")
    user_question = st.text_area(
        "Formulez votre question en langage naturel:",
        value="Quels types d'op√©rations ont √©t√© r√©alis√©es en 2025 ?",
        height=120,
        placeholder="Ex: Combien de patients ont √©t√© admis en urgence ce mois-ci?"
    )
    
    # --- Section Etat Session ---
    session_status = st.container()
    if not st.session_state.session_id:
        session_status.warning("‚ö†Ô∏è D√©marrez une session dans la barre lat√©rale")
    else:
        session_status.success(f"Session active: `{st.session_state.session_id}`")
    
    # --- Bouton d'ex√©cution ---
    if st.button("G√©n√©rer la requ√™te SQL", type="primary", use_container_width=True, key="gen1"):
        if not user_question.strip():
            st.warning("Veuillez saisir une question")
        elif not st.session_state.session_id:
            st.warning("D√©marrez d'abord une session")
        else:
            with st.status("**Traitement en cours...**", expanded=True) as status:
                try:
                    # Envoi √† l'API
                    status.write("‚ö° Envoi √† l'API Flask...")
                    payload = {"question": user_question, "session_id": st.session_state.session_id}
                    response = requests.post(FLASK_API_URL, json=payload)

                    if response.status_code == 200:
                        result = response.json()
                        status.update(label="‚úÖ Traitement r√©ussi!", state="complete")
                        
                        # Stockage historique
                        st.session_state.history.append({
                            "question": user_question,
                            "result": result
                        })
                        
                        # Affichage principal
                        st.subheader("üìù Requ√™te SQL G√©n√©r√©e")
                        final_sql = result.get("sql_validated_post_exec", "")
                        st.session_state.last_sql_generated = final_sql
                        st.code(final_sql, language="sql")
                        
                        # R√©ponse naturelle
                        st.subheader("üí¨ R√©ponse Naturelle")
                        natural_response = result.get("user_friendly_answer", "")
                        if natural_response:
                            st.success(natural_response)
                        else:
                            st.info("Aucune r√©ponse g√©n√©r√©e")

                        
                        st.subheader("üí¨Raison Llama")
                        raison_response = result.get("llama_reason", "")
                        if natural_response:
                            st.success(raison_response)
                        else:
                            st.info("Aucune raison g√©n√©r√©e")
                        
                        # R√©sultats d'ex√©cution
                        st.subheader("üìä R√©sultats d'Ex√©cution")
                        final_result = result.get("final_result")
                        if final_result and final_result.get("success"):
                            rows = final_result.get("rows", [])
                            columns = final_result.get("columns", [])
                            if rows:
                                df = pd.DataFrame(rows, columns=columns)
                                st.dataframe(df, use_container_width=True)
                            else:
                                st.info("Aucun r√©sultat retourn√© (0 lignes)")
                        elif final_result:
                            st.error(f"Erreur d'ex√©cution: {final_result.get('error', 'Inconnue')}")
                        
                        # D√©tails du pipeline
                        with st.expander("üîç D√©tails du Pipeline"):
                            tabs = st.tabs(["√âtapes SQL", "Logs Techniques"])
                            
                            with tabs[0]:
                                st.subheader("1. G√©n√©ration Initiale (SQLCoder-7b)")
                                st.code(result.get("sql_code_initial_a", ""), language="sql")
                                
                                st.subheader("2. Renforcement (SQLCoder-8b)")
                                st.code(result.get("sql_code_initial_b", ""), language="sql")
                                
                                st.subheader("3. Validation (Llama)")
                                st.code(result.get("sql_validated_llama", ""), language="sql")
                            
                            with tabs[1]:
                                st.json(result.get("log", {}))
                            
                        # M√©triques
                        st.caption(f"‚è±Ô∏è Dur√©e totale: {result.get('duration_total_pipeline', 0):.2f}s | " +
                                  f"Sch√©ma utilis√©: {result.get('schema_rag', 'N/A')}")
                    else:
                        st.error(f"Erreur API: {response.status_code}")
                        st.json(response.json())
                except Exception as e:
                    status.error(f"Erreur critique: {str(e)}")

# --- Tab 2: Test Multi-Questions ---
with tab2:
    st.subheader("üß™ Test Automatis√© Multi-Questions")
    st.info("Ex√©cute s√©quentiellement toutes les questions de test avec une nouvelle session par question")
    
    if st.button("Lancer le Test Complet", type="primary", use_container_width=True, key="batch_full"):
        results = []
        progress_bar = st.progress(0, text="Initialisation...")
        status_text = st.empty()
        
        for i, question in enumerate(questions):
            try:
                # Mise √† jour UI
                progress = int((i + 1) / len(questions) * 100)
                progress_bar.progress(progress, text=f"Traitement ({i+1}/{len(questions)})")
                status_text.info(f"**Question en cours:**\n{question}")
                
                # Cr√©ation session
                session_res = requests.post(START_SESSION_URL)
                session_id = session_res.json().get("session_id") if session_res.ok else None
                
                if not session_id:
                    results.append({"question": question, "error": "Erreur cr√©ation session"})
                    continue
                
                # Appel API
                payload = {"question": question, "session_id": session_id}
                response = requests.post(FLASK_API_URL, json=payload)
                
                if response.ok:
                    result = response.json()
                    final_sql = result.get("sql_validated_post_exec", "")
                    natural_response = result.get("user_friendly_answer", "")
                    exec_result = result.get("final_result", {})
                    
                    # Formatage r√©sultat
                    result_entry = {
                        "Question": question,
                        "SQL G√©n√©r√©": final_sql,
                        "R√©ponse Naturelle": natural_response,
                        "Statut Ex√©cution": "Succ√®s" if exec_result.get("success") else "√âchec",
                        "Erreur": exec_result.get("error", ""),
                        "Lignes Retourn√©es": len(exec_result.get("rows", [])),
                        "Dur√©e (s)": result.get("duration_total_pipeline", 0)
                    }
                    results.append(result_entry)
                else:
                    results.append({"question": question, "error": f"Erreur API {response.status_code}"})
                
                # Nettoyage session
                requests.post(END_SESSION_URL, json={"session_id": session_id})
                
            except Exception as e:
                results.append({"question": question, "error": str(e)})
        
        # Affichage r√©sultats
        progress_bar.empty()
        status_text.empty()
        
        if results:
            df_results = pd.DataFrame(results)
            st.success("‚úÖ Traitement termin√©!")
            
            # Affichage tableau
            st.subheader("üìä R√©sum√© des R√©sultats")
            st.dataframe(df_results, use_container_width=True, hide_index=True)
            
            # T√©l√©chargement
            csv = df_results.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üíæ T√©l√©charger les r√©sultats (CSV)",
                data=csv,
                file_name="results_nlp_sql.csv",
                mime="text/csv"
            )


# --- Tab 3: Batch Session Ind√©pendant ---
import streamlit as st
import pandas as pd
import requests

with tab3:
    st.subheader("‚ö° Batch Sessions Ind√©pendants")
    st.info("Chaque question est trait√©e dans une session s√©par√©e (isolation totale)")

    if st.button("Lancer le Batch (sessions ind√©pendantes)", type="primary", use_container_width=True, key="batch_multi"):
        try:
            results = []
            progress_bar = st.progress(0, text="Initialisation...")
            excel_file = "results_complet_final.xlsx"

            for i, question in enumerate(questions):
                # --- 1) Cr√©er une session pour cette question ---
                session_res = requests.post(START_SESSION_URL)
                session_id = session_res.json().get("session_id") if session_res.ok else None

                if not session_id:
                    results.append({
                        "Question": question,
                        "Statut": "‚ùå",
                        "Erreur": "√âchec cr√©ation session"
                    })
                    continue

                # --- 2) Mise √† jour UI ---
                progress = int((i + 1) / len(questions) * 100)
                progress_bar.progress(progress, text=f"Traitement ({i+1}/{len(questions)})")

                # --- 3) Appel API ---
                payload = {"question": question, "session_id": session_id}
                response = requests.post(FLASK_API_URL, json=payload)

                if response.ok:
                    result = response.json()
                    final_sql = result.get("sql_validated_post_exec", "")
                    natural_response = result.get("user_friendly_answer", "")
                    exec_result = result.get("final_result", {})
                    raison = result.get("llama_reason", "")

                    results.append({
                        "Question": question,
                        "SQL Final": final_sql,
                        "R√©ponse": natural_response,
                        "Statut": "‚úÖ" if exec_result.get("success") else "‚ùå",
                        "Lignes": len(exec_result.get("rows", [])),
                        "Raison": raison,
                        "Dur√©e (s)": f"{result.get('duration_total_pipeline', 0):.2f}"
                    })
                else:
                    results.append({
                        "Question": question,
                        "Statut": "‚ùå",
                        "Erreur": f"API {response.status_code}"
                    })

                # --- 4) Sauvegarde Excel apr√®s chaque question ---
                df_results = pd.DataFrame(results)
                df_results.to_excel(excel_file, index=False)

                # --- 5) Fermer la session (cleanup) ---
                requests.post(END_SESSION_URL, json={"session_id": session_id})

            # Nettoyage final UI
            progress_bar.empty()

            # Bouton de t√©l√©chargement unique
            with open(excel_file, "rb") as f:
                st.download_button(
                    label="üì• T√©l√©charger Excel (√† jour)",
                    data=f,
                    file_name=excel_file,
                    mime="application/vnd.ms-excel",
                    key="download_excel_live"
                )

            # R√©sultats finaux
            st.success(f"‚úÖ Batch termin√© - {len(questions)} questions trait√©es (sessions ind√©pendantes)")
            st.dataframe(df_results, use_container_width=True, hide_index=True)

        except Exception as e:
            st.error(f"Erreur critique: {str(e)}")
